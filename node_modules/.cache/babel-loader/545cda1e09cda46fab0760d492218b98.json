{"ast":null,"code":"import _slicedToArray from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n//first we make a nested array of random boolean values, createBoard()\n//Example: let board = [[true,false,true], [false,false,true], [true,false,false],]\n//then within our render we create another nested array of rows and cells\n//within the render loops we give each cell a boolean prop \"isLit\" that corresponds to the other nested array at the same matchiing position \n//we do this  isLit={this.state.board[y][x]}, both [y] and [x] correspond to the nested array board[][]\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n    //board should be a collection of rows arrays that store random boolean values\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        //create a row array for every row in props\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          //into the row array push true or false if random num is greater than 0.25\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      //deconstruct props for easier access\n      // let ncols = this.props.ncols\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // the if logic is if this coord is actually on board, flip it, meaning cant flip a 7-1 on a 5-5\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          //change the value of true to false\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          //indexes of nested arrays are accessed via [][], we are accessing the values of a nested array \n          //we are pushing the value at the index of each nested array in the board array, those indexes are holding boolean values\n          //row.push <Cell />\n          //Cell isLit=each index of board and its value, example [1][2] would equal true/false\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 18\n            }\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","tblBoard","flipCellsAround","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AA2BC;AACA;AACA;AACA;AACD;;IAIMC,K;;;AAEJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAEjB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb;AAHiB;AAOlB;;;;;AAMD;AACA;kCACc;AACZ,UAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC;AACA,YAAIE,GAAG,GAAG,EAAV;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA9B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC;AACAD,UAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AACD,aAAOJ,KAAP;AACD;AAED;;;;oCAEgBW,K,EAAO;AACrB;AACA;AAFqB,wBAGA,KAAKd,KAHL;AAAA,UAGhBS,KAHgB,eAGhBA,KAHgB;AAAA,UAGTH,KAHS,eAGTA,KAHS;AAIrB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAJqB,6BAKRW,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CALQ;AAAA;AAAA,UAKhBZ,CALgB;AAAA,UAKbG,CALa;;AAQrB,eAASU,QAAT,CAAkBb,CAAlB,EAAqBG,CAArB,EAAwB;AACtB;AACA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9C;AACAH,UAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF;;AAEDU,MAAAA,QAAQ,CAACb,CAAD,EAAIG,CAAJ,CAAR,CAhBqB,CAiBrB;AAEA;AACA;AAEA;AACD;AAGD;;;;6BAES;AAAA;;AAEP;AAEA;AAEA;AAEA;AACA,UAAIW,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAId,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA9B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAIE,GAAG,GAAG,EAAV;;AADwC,mCAE/BC,CAF+B;AAGtC;AACA;AACA;AACA;AACA,cAAIM,KAAK,aAAMT,CAAN,cAAWG,CAAX,CAAT;AACAD,UAAAA,GAAG,CAACG,IAAJ,eAAS,oBAAC,IAAD;AACG,YAAA,GAAG,EAAEI,KADR;AAEG,YAAA,KAAK,EAAE,MAAI,CAACb,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAFV;AAGG,YAAA,iBAAiB,EAAE;AAAA,qBAAM,MAAI,CAACY,eAAL,CAAqBN,KAArB,CAAN;AAAA,aAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AARsC;;AAExC,aAAK,IAAIN,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA9B,EAAqCD,CAAC,EAAtC,EAA0C;AAAA,gBAAjCA,CAAiC;AAUzC;;AACDW,QAAAA,QAAQ,CAACT,IAAT,eAAc;AAAI,UAAA,GAAG,EAAEL,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaE,GAAb,CAAd;AACD;;AACD,0BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAsBKY,QAtBL,CADF,CADF;AA4BD;;;;EAnHiBtB,S;;AAAdE,K,CAUCsB,Y,GAAe;AACpBf,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA6GtB,eAAed,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n\n //first we make a nested array of random boolean values, createBoard()\n //Example: let board = [[true,false,true], [false,false,true], [true,false,false],]\n //then within our render we create another nested array of rows and cells\n //within the render loops we give each cell a boolean prop \"isLit\" that corresponds to the other nested array at the same matchiing position \n//we do this  isLit={this.state.board[y][x]}, both [y] and [x] correspond to the nested array board[][]\n\n\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\nstatic defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  //board should be a collection of rows arrays that store random boolean values\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      //create a row array for every row in props\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++) {\n        //into the row array push true or false if random num is greater than 0.25\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    //deconstruct props for easier access\n    // let ncols = this.props.ncols\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // the if logic is if this coord is actually on board, flip it, meaning cant flip a 7-1 on a 5-5\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        //change the value of true to false\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let tblBoard = [];\n    for(let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x =0; x < this.props.ncols; x++) {\n        //indexes of nested arrays are accessed via [][], we are accessing the values of a nested array \n        //we are pushing the value at the index of each nested array in the board array, those indexes are holding boolean values\n        //row.push <Cell />\n        //Cell isLit=each index of board and its value, example [1][2] would equal true/false\n        let coord = `${y}-${x}`;\n        row.push(<Cell \n                    key={coord} \n                    isLit={this.state.board[y][x]} \n                    flipCellsAroundMe={() => this.flipCellsAround(coord)}/>);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {/* <tr key=\"0\">\n            <Cell key=\"0-0\" isLit={false} /> \n            <Cell key=\"0-1\" isLit={true} />\n            <Cell key=\"0-2\" isLit={true} />\n            <Cell key=\"0-3\" isLit={true} />\n            <Cell key=\"0-4\" isLit={true} />\n          </tr>\n          <tr key=\"1\">\n            <Cell key=\"1-0\" isLit={true} />\n            <Cell key=\"1-1\" isLit={true} />\n            <Cell key=\"1-2\" isLit={true} />\n            <Cell key=\"1-3\" isLit={true} />\n            <Cell key=\"1-4\" isLit={true} />\n          </tr>\n          <tr key=\"2\">\n            <Cell key=\"2-0\" isLit={true} />\n            <Cell key=\"2-1\" isLit={true} />\n            <Cell key=\"2-2\" isLit={true} />\n            <Cell key=\"2-3\" isLit={true} />\n            <Cell key=\"2-4\" isLit={true} /> \n          </tr> */}\n            {tblBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}