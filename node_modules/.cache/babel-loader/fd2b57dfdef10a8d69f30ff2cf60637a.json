{"ast":null,"code":"import _slicedToArray from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: [[false, false, false], [true, true, false], [false, false, false]]\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        key: \"0-0\",\n        isLit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"0-1\",\n        isLit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"0-2\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"0-3\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"0-4\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        key: \"1-0\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"1-1\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"1-2\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"1-3\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"1-4\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        key: \"2-0\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"2-1\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"2-2\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"2-3\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        key: \"2-4\",\n        isList: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: Math.floor(Math.random * 5)\n};\nexport default Board;","map":{"version":3,"sources":["/Users/dustincoffman/Desktop/Code/React/Udemy React Course/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","coord","ncols","nrows","split","map","Number","y","x","flipCell","defaultProps","chanceLightStartsOn","Math","floor","random"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: [\n        [false, false, false],\n        [true, true, false],\n        [false, false, false]\n      ]\n    }\n  }\nstatic defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: Math.floor(Math.random * 5)\n}\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    return (\n      <table className=\"Board\">\n        <tbody>\n          <tr key=\"0\">\n            <Cell key=\"0-0\" isLit={true} />\n            <Cell key=\"0-1\" isLit={true} />\n            <Cell key=\"0-2\" isList={true} />\n            <Cell key=\"0-3\" isList={true} />\n            <Cell key=\"0-4\" isList={true} />\n          </tr>\n          <tr key=\"1\">\n            <Cell key=\"1-0\" isList={true} />\n            <Cell key=\"1-1\" isList={true} />\n            <Cell key=\"1-2\" isList={true} />\n            <Cell key=\"1-3\" isList={true} />\n            <Cell key=\"1-4\" isList={true} />\n          </tr>\n          <tr key=\"2\">\n            <Cell key=\"2-0\" isList={true} />\n            <Cell key=\"2-1\" isList={true} />\n            <Cell key=\"2-2\" isList={true} />\n            <Cell key=\"2-3\" isList={true} />\n            <Cell key=\"2-4\" isList={true} />\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}